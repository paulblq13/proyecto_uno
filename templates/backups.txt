from django.shortcuts import render, redirect, get_object_or_404

#==JAVA
from django.http import JsonResponse
from django.conf import settings
#==VIEWS
from django.views.generic import ListView, CreateView, UpdateView, DetailView
#==FORMS

#==PILLOW
from PIL import Image, ExifTags
from io import BytesIO
from django.core.files.uploadedfile import InMemoryUploadedFile
#==TIEMPO
from django.utils import timezone
from datetime import datetime
#==OTROS
from django.views.decorators.csrf import csrf_exempt
#===URLS
from django.urls import reverse_lazy
#===CLOUDINARY
#===CLOUDINARY===
import cloudinary
import cloudinary.uploader
#===MENSAJES DE ERROR===
from django.contrib import messages 
#===MENSAJES DE ERROR===

#===SUBIR FOTO V1
def subir_foto(request):
    if request.method == 'POST':
        form = FotoForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('subir_foto')
    else:
        form = FotoForm()
    return render(request, 'photoevent/subirfoto.html', {'form': form})

#===SUBIR FOTO V2
def subir_fotoV2(request, cod_evento):

    evento = Evento.objects.get(codigo_evento=cod_evento)
    print(evento.id)
    
    if request.method == 'POST':
        form = FotoForm(request.POST, request.FILES)
        if form.is_valid():
            foto = form.save(commit=False)
            imagen = Image.open(foto.imagen)

            try:
                for orientation in ExifTags.TAGS.keys():
                    if ExifTags.TAGS[orientation] == 'Orientation':
                        break
                exif = imagen._getexif()
                if exif is not None:
                    orientation_value = exif.get(orientation, None)
                    if orientation_value == 3:
                        imagen = imagen.rotate(180, expand=True)
                    elif orientation_value == 6:
                        imagen = imagen.rotate(270, expand=True)
                    elif orientation_value == 8:
                        imagen = imagen.rotate(90, expand=True)
            except (AttributeError, KeyError, IndexError):
                # La imagen no tiene datos EXIF o no se pudo procesar
                pass            
            # Dimensiones para pantalla Full HD
            ancho_deseado = 1920
            alto_deseado = 1080
            # Obtener dimensiones originales
            ancho_original, alto_original = imagen.size
            # Calcular la relación de aspecto
            relacion_aspecto = ancho_original / alto_original        
            # Calcular el nuevo alto y ancho
            nuevo_alto = alto_deseado
            nuevo_ancho = int(nuevo_alto * relacion_aspecto)                
            # Si el nuevo ancho supera el límite deseado, ajusta el ancho
            if nuevo_ancho > ancho_deseado:
                nuevo_ancho = ancho_deseado
                nuevo_alto = int(nuevo_ancho / relacion_aspecto)
            # Redimensionar la imagen
            nueva_imagen = imagen.resize((nuevo_ancho, nuevo_alto), Image.LANCZOS)
            # Convertir a RGB si es necesario
            if nueva_imagen.mode == 'RGBA':
                nueva_imagen = nueva_imagen.convert('RGB')
            elif nueva_imagen.mode == 'P':
                nueva_imagen = nueva_imagen.convert('RGB')
            # Generar un nombre único con la fecha y hora
            timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
            foto.imagen.name = f"{evento.codigo_evento}_{timestamp}.jpg"
            # Guardar la imagen redimensionada
            buffer = BytesIO()
            nueva_imagen.save(buffer, format='JPEG')
            buffer.seek(0)
            # Reemplazar la imagen original por la nuevaa
            foto.imagen = InMemoryUploadedFile(
                buffer, 'ImageField', foto.imagen.name, 'image/jpeg', buffer.getbuffer().nbytes, None
            )
            foto.id_evento = evento
            foto.save()
            messages.success(request, "La foto se ha subido con éxito, será revisada y se mostrará en la pantalla en unos segundos xD")
            return redirect('subir_foto', cod_evento=evento.codigo_evento)
    else:
        form = FotoForm()
    return render(request, 'photoevent/subirfoto.html', {'form': form})


#===ACTUALIZAR FOTO (X)         
@csrf_exempt
def actualizar_ultima_foto(request):
    if request.method == 'POST':
        # Cambiar el valor de ultima_foto en la sesión o en la base de datos
        request.session['ultima_foto'] = True
        return JsonResponse({'status': 'success'})
    
    return JsonResponse({'status': 'failed'})  



FOTOS INVITACION 01

<div class="fondo03">
    <div>
        <div class="galeria-fotos fotos_invisible">
          <img class="fade-in" src="{% static 'img/imagen1.jpg' %}" alt="First slide">
          <img class="fade-in" src="{% static 'img/imagen2.jpg' %}" alt="First slide">
          <img class="fade-in" src="{% static 'img/imagen3.jpg' %}" alt="First slide">
        </div>
      </div>
  </div>
  <div  style="position: relative;">
    <div class="imagen-superpuesta">
      <img src="{% static 'img/fiesta_estrellas.gif' %}" alt="Fiesta">
    </div>
  </div>

  //Aparecer imagenes

  document.addEventListener("DOMContentLoaded", function () {
    const elements = document.querySelectorAll('.fotos_invisible');

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in');
                observer.unobserve(entry.target); // Deja de observar una vez que el efecto se haya aplicado
            }
        });
    }, { threshold: 0.1 }); // El 10% del elemento debe estar visible para activarse

    elements.forEach(element => observer.observe(element));
});  